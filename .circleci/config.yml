version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.16
jobs:
  test-templates:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: cf-test
          aws-region: AWS_DEFAULT_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          configure-default-region: true
      - run:
          name: Validating CloudFormation code 
          command: | 
            echo "Validating all templates in the ${HOME}/project/products directory..."
            for template in `ls ${HOME}/project/products/*yml`
            do
              echo "Validating CloudFormation template: $template"
              aws cloudformation validate-template --template-body file:///$template
            done

            echo "Validating all templates in the ${HOME}/project/service_catalog directory..."
            for template in `ls ${HOME}/project/service_catalog/*yml`
            do
              echo "Validating CloudFormation template: $template"
              aws cloudformation validate-template --template-body file:///$template
            done

  deploy-templates:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: cf-test
          aws-region: AWS_DEFAULT_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          configure-default-region: true
      - run:
          name: Deploy product templates
          command: | 
            # Install required packages 

            ##  Install jq to parse the JSON
            sudo apt-get update 
            sudo apt-get install jq -y
        
            
            echo "Copying all product templates to the s3 bucket responsible for hosting the templates."
            aws s3 cp ${HOME}/project/products s3://${PRODUCT_S3_BUCKET}/ --recursive --exclude "*" --include "*.yml"
            ## Version to display
            echo "Building for tag: ${CIRCLE_TAG}"
            VERSION=${CIRCLE_TAG}
            ## Number of versions to maintain
            KEEP_COUNT=2
            export ALL_VERSIONS=~/ALL_VERSIONS
            export KEEP_VERSIONS=~/KEEP_VERSIONS

            #Portfolio you are targeting for redeployment
            TARGET_PORTFOLIO=${PORTFOLIO}
            #List of all products in account
            PRODUCTS=`aws servicecatalog search-products | jq ".ProductViewSummaries[].ProductId" | sed s/\"//g`
            for product in ${PRODUCTS}
            do
              echo "Product: $product"
              ARTIFACTS=`aws servicecatalog list-provisioning-artifacts --product-id $product | jq ".ProvisioningArtifactDetails[].Id" | sed s/\"//g | tail -n1`
              URL=`aws servicecatalog describe-provisioning-artifact --product-id $product --provisioning-artifact-id $ARTIFACTS | jq ".Info.TemplateUrl" | sed s/\"//g`

              echo $URL
              #aws servicecatalog update-provisioning-artifact --product-id $product --provisioning-artifact-id $ARTIFACTS --active
              aws servicecatalog create-provisioning-artifact --product-id $product --parameters Name=$VERSION,Info={LoadTemplateFromURL=$URL},Type=CLOUD_FORMATION_TEMPLATE
              #Delete everything except for the last two entries

              #Create two files containing all versions and all versions we wish to keep
              test -f $ALL_VERSIONS && rm $ALL_VERSIONS
              test -f $KEEP_VERSIONS && rm $KEEP_VERSIONS
              echo "Creating list of all versions..."
              aws servicecatalog list-provisioning-artifacts --product-id $product | jq ".ProvisioningArtifactDetails[].Id" | sed s/\"//g | sort |  tee $ALL_VERSIONS
              echo "Creating list of versions to keep..."
              aws servicecatalog list-provisioning-artifacts --product-id $product | jq ".ProvisioningArtifactDetails[].Id" | sed s/\"//g | tail -n $KEEP_COUNT | sort  | tee  $KEEP_VERSIONS

              DELETE_VERSIONS=$(comm -23  $ALL_VERSIONS $KEEP_VERSIONS)
              for delete_version in $DELETE_VERSIONS
              do
                echo "Deleting prior version: $delete_version  ( we only keep $KEEP_COUNT versions ) "
                aws servicecatalog delete-provisioning-artifact --product-id $product --provisioning-artifact-id $delete_version
              done

            done
            

         

workflows:
  version: 2
  aws-cli:
    jobs:
      - test-templates:
          filters:  # Build on all branches and tags ( tags filter must be present to run on tag )
            tags:
              only: /.*/      
      - deploy-templates:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - test-templates                  